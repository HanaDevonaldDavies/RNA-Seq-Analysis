---
title: "RNA-seq Analysis"
format: html
editor: visual
---

## RNA-seq Analysis

```{r}
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(DESeq2)
library(stringr)
library(dplyr)


# Load raw counts
counts <- read.csv("C:\\Users\\davie\\Downloads\\raw_counts.csv", row.names = 1)

# Check the data structure
dim(counts)  
head(counts)
summary(rowSums(counts))
```

```{r}
sum(is.na(counts))
```

```{r}
# Remove genes with very low expression across all samples
#counts_filtered <- counts[rowSums(counts) > 10, ]

counts_filtered <- counts


# Check how many genes were removed
dim(counts_filtered) 
```

```{r}
# Calculate total reads per sample
library_sizes <- colSums(counts_filtered)

# Plot library sizes
ggplot(data.frame(sample = colnames(counts_filtered), size = library_sizes), aes(x = sample, y = size)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(title = "Library Sizes", x = "Samples", y = "Total Reads") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

```{r}
# Normalize counts using log transformation
log_counts <- log2(counts_filtered + 1)

# Calculate Euclidean sample distances
sample_dist <- dist(t(log_counts))
sample_matrix <- as.matrix(sample_dist)

# Heatmap of sample distances
pheatmap(sample_matrix, col = colorRampPalette(brewer.pal(9, "Blues"))(50),
         main = "Sample Distance Heatmap")
```

```{r}
# PCA Analysis
pca_data <- prcomp(t(log_counts))

# Extract PC1 and PC2
pca_df <- data.frame(PC1 = pca_data$x[,1], PC2 = pca_data$x[,2])

# Plot PCA
ggplot(pca_df, aes(x = PC1, y = PC2)) +
  geom_point(size = 3, color = "blue") +
  theme_minimal() +
  labs(title = "PCA of RNA-seq Samples")
```

------------------------------------------------------------------------

(Delete 6 & 12 and 7 & 8 (5T4 samples))

```{r}
txi.salmon <- readRDS("C:\\Users\\davie\\Downloads\\txi_salmon.rds")

colnames(txi.salmon$counts)

 # Extract sample names
samples <- colnames(txi.salmon$counts)

# Extract condition: If last occurrence in the sample name is "WT" or "11R"
condition <- ifelse(str_detect(samples, "WT$"), "wild_type",
                    ifelse(str_detect(samples, "11R$"), "modified", "unknown"))

# Load sample metadata (Donor information)
sample_metadata <- read.csv("C:\\Users\\davie\\Downloads\\samplesheet.csv", row.names = 1)

sample_metadata <- sample_metadata[-c(2, 6,7,8), ]

sample_metadata$condition <- condition




```

```{r}
rownames(sample_metadata) == colnames(txi.salmon$counts)

sample_metadata$Donor = as.factor(sample_metadata$Donor)

sample_metadata$Group <- factor(sample_metadata$Group, levels = c("WT_WT", "11R_11R"))

sample_metadata$condition <- factor(sample_metadata$Group, levels = c("WT_WT", "11R_11R"))
```

Run Deseq2 using counts imported by Tximport

```{r}
dds <- DESeqDataSetFromTximport(txi.salmon, sample_metadata, ~ Donor + condition)

dds <- dds[rowSums(counts(dds)) > 10, ]

dds <- DESeq(dds)



```

1.  **Performing PCA for sample clustering**

```{r}
# Perform PCA to visualize global gene expression patterns
vsd <- vst(dds, blind = TRUE) 

pca_data <- plotPCA(vsd, intgroup = c("Donor", "condition"), returnData = TRUE)

ggplot(pca_data, aes(PC1, PC2, color = condition, shape = Donor)) + 
    geom_point(size = 3) + 
    ggtitle("PCA of RNA-seq Data (Colored by Donor and Condition)")

ggsave("PCA.png")
```

1.  **Differential gene expression analysis**

```{r}
res <- results(dds, contrast = c("condition", "11R_11R", "WT_WT"))
```

```{r}
# Load required package
library(ggrepel)

# Perform Differential Gene Expression Analysis
res <- results(dds, contrast = c("condition", "11R_11R", "WT_WT"))
res <- res[order(res$padj), ]  
res$log2FoldChange[is.na(res$log2FoldChange)] <- 0
res$padj[is.na(res$padj)] <- 1

# Convert to data frame and add gene names for labeling
res_df <- as.data.frame(res)
res_df$gene <- rownames(res_df)

# Subset for labeling: padj < 0.05 and absolute log2FC > 1
res_df$label <- ifelse(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1, res_df$gene, NA)

# Volcano Plot with labels
volcano <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = padj < 0.05)) +
    geom_point(alpha = 0.5) +
    geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
    geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
    scale_color_manual(values = c("black", "red")) +
    geom_text_repel(aes(label = label), size = 3, max.overlaps = 15) +
    ggtitle("Volcano Plot of Differential Expression") +
    theme_minimal()

# Save plot
ggsave("volcano_plot_labeled.png", plot = volcano, width = 8, height = 6)
```

```{r}
# Load required packages
library(ggrepel)
library(org.Hs.eg.db)  # Human genome database
library(AnnotationDbi)

# Define your genes of interest with their known symbols
genes_of_interest <- c(
  "ENSG00000203811" = "H3C14",
  "ENSG00000214717" = "ZBED1",
  "ENSG00000108702" = "CCL1",
  "ENSG00000291208" = "ENSG00000291208",  # No symbol available
  "ENSG00000182484" = "WASH6P",
  "ENSG00000177606" = "JUN",
  "ENSG00000211829" = "TRDC"
)

# Perform Differential Gene Expression Analysis
res <- results(dds, contrast = c("condition", "11R_11R", "WT_WT"))
res <- res[order(res$padj), ]  
res$log2FoldChange[is.na(res$log2FoldChange)] <- 0
res$padj[is.na(res$padj)] <- 1

# Convert to data frame and add gene names
res_df <- as.data.frame(res)
res_df$ensembl <- rownames(res_df)

# Convert ENSEMBL IDs to gene symbols
res_df$symbol <- mapIds(org.Hs.eg.db,
                       keys = rownames(res_df),
                       column = "SYMBOL",
                       keytype = "ENSEMBL",
                       multiVals = "first")

# For genes that didn't get a symbol, keep the ENSEMBL ID
res_df$symbol <- ifelse(is.na(res_df$symbol), res_df$ensembl, res_df$symbol)

# Manually add the symbols for your genes of interest
for (ensg in names(genes_of_interest)) {
  if (ensg %in% res_df$ensembl) {
    res_df[res_df$ensembl == ensg, "symbol"] <- genes_of_interest[ensg]
  }
}

# Subset for labeling: padj < 0.05 and absolute log2FC > 1, or genes of interest
res_df$label <- ifelse((res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1) | 
                       res_df$ensembl %in% names(genes_of_interest), 
                      res_df$symbol, NA)

# Volcano Plot with labels
volcano <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), 
                            color = padj < 0.05 & abs(log2FoldChange) > 1)) +
    geom_point(alpha = 0.5) +
    geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
    geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
    scale_color_manual(values = c("black", "red"), 
                      name = "Significant (FDR < 0.05 & |log2FC| > 1)") +
    geom_text_repel(aes(label = label), size = 3, max.overlaps = 20) +
    ggtitle("Volcano Plot of Differential Expression") +
    theme_minimal() +
    labs(x = "log2 Fold Change", y = "-log10(adjusted p-value)")

# Save plot
ggsave("volcano_plot_labeled.png", plot = volcano, width = 8, height = 6)
```

```{r}

### Step 6: Heatmap of Significant Genes (padj < 0.05)
significant_genes <- rownames(res)[res$padj < 0.05]

if (length(significant_genes) > 0) {
    png("heatmap_significant_genes.png", width = 1200, height = 1000)
    pheatmap(assay(vsd)[significant_genes, ],
             cluster_rows = TRUE,
             cluster_cols = TRUE,
             main = "Heatmap of Significant Genes (padj < 0.05)")
    dev.off()
}
```

**Expression of T-Cell Subset Genes**

```{r}
### Step 7: Expression of T-cell Subset Genes
# Load T-cell subset gene list ****
t_cell_genes <- read.csv("C:\\Users\\davie\\Desktop\\Tcell.csv", header = TRUE)
t_cell_gene_list <- t_cell_genes$Gene

# Extract normalized counts for T-cell genes
t_cell_counts <- assay(vsd)[rownames(assay(vsd)) %in% t_cell_gene_list, ]

# Heatmap of T-cell subset genes
if (nrow(t_cell_counts) > 0) {
    pheatmap(t_cell_counts, cluster_rows = TRUE, cluster_cols = TRUE,
             annotation_col = col_data, main = "Expression of T-cell Subset Genes")
} else {
    print("No matching T-cell genes found in the dataset.")
}

```

To-Do

1.  **Overrepresentation analysis (ORA)**

```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install(c("clusterProfiler", "org.Hs.eg.db", "enrichplot", "DOSE", "ReactomePA"))

library(clusterProfiler)
library(org.Hs.eg.db)   
library(enrichplot)      
library(DOSE)           
library(ReactomePA)      
library(ggplot2)
library(dplyr)
```

**org.Hs.eg.db gene annotation database for Homo sapiens (humans)**, which provides mappings between different gene identifiers like **Gene Symbols**, **ENTREZ IDs**, and **ENSEMBL IDs**.

# \*\*\* Need to change Gene Formats to match database

<https://bioconductor.riken.jp/packages/3.19/data/annotation/html/org.Hs.eg.db.html>

**Over-representation Analysis (ORA)**

<https://academic.oup.com/bioinformaticsadvances/article/4/1/vbae159/7829164?login=true>

```{r}
head(significant_genes)
```

```{r}
library(clusterProfiler)
library(org.Hs.eg.db)

# Convert Ensembl gene IDs to Entrez IDs
gene_entrez <- bitr(significant_genes,
                    fromType = "ENSEMBL",
                    toType = "ENTREZID",
                    OrgDb = org.Hs.eg.db)

# Check the result
head(gene_entrez)
```

```{r}
library(clusterProfiler)
library(org.Hs.eg.db)
library(ReactomePA)
library(ggplot2)

deg_results <- as.data.frame(res)
significant_genes <- rownames(deg_results[deg_results$padj < 0.05 & !is.na(deg_results$padj), ])

significant_genes <- gsub("\\..*", "", significant_genes)

gene_entrez <- bitr(significant_genes,
                    fromType = "ENSEMBL",
                    toType = "ENTREZID",
                    OrgDb = org.Hs.eg.db)
```

GO

```{r}
go_enrich <- enrichGO(gene         = gene_entrez$ENTREZID,
                      OrgDb        = org.Hs.eg.db,
                      keyType      = "ENTREZID",
                      ont          = "BP",
                      pAdjustMethod = "BH",
                      pvalueCutoff  = 0.05,
                      qvalueCutoff  = 0.05)
```

**KEGG Pathway Enrichment Analysis**

```{r}
kegg_enrich <- enrichKEGG(gene         = gene_entrez$ENTREZID,
                          organism     = "hsa",
                          pAdjustMethod = "BH",
                          pvalueCutoff  = 0.05)
```

Gives a broad Functional Overview

**Reactome Pathway Enrichment Analysis**

```{r}
reactome_enrich <- enrichPathway(gene         = gene_entrez$ENTREZID,
                                 organism     = "human",
                                 pvalueCutoff = 0.05,
                                 qvalueCutoff = 0.05)
```

VISUALISATION

```{r}

dotplot(kegg_enrich, showCategory = 10) + ggtitle("KEGG Enrichment")
ggsave("KEGG Enrichment.png")
dotplot(reactome_enrich, showCategory = 10) + ggtitle("Reactome Enrichment")

# Create and assign the dotplot to an object
p <- dotplot(reactome_enrich, showCategory = 20) + 
  ggtitle("Reactome Enrichment")

# Save it
ggsave("Reactome Enrichment.png", plot = p, width = 12, height = 8, dpi = 300)
```

1.  **Gene Set Enrichment Analysis (GSEA)**

```         
evaluates the enrichment of predefined gene sets in a **ranked** gene list based on log2FoldChange.
```

<https://www.gsea-msigdb.org/gsea/index.jsp>

```{r}
library(dplyr)

# 1. Remove ENSEMBL version suffix
deg_results$ENSEMBL <- gsub("\\..*", "", rownames(deg_results))

# 2. Map ENSEMBL to ENTREZ IDs
gene_map <- bitr(deg_results$ENSEMBL,
                 fromType = "ENSEMBL",
                 toType = "ENTREZID",
                 OrgDb = org.Hs.eg.db)

# 3. Merge to get log2FC with ENTREZ IDs
gene_ranks <- merge(deg_results, gene_map, by.x = "ENSEMBL", by.y = "ENSEMBL")

# 4. Drop any rows with missing log2FC or ENTREZ ID
gene_ranks <- gene_ranks %>% filter(!is.na(log2FoldChange), !is.na(ENTREZID))

# 5–7: Remove duplicated ENTREZ IDs and create ranked list
gene_ranks_unique <- gene_ranks %>%
  filter(!duplicated(ENTREZID))  # Keep first occurrence only

# Now create named vector
gene_list <- gene_ranks_unique$log2FoldChange
names(gene_list) <- gene_ranks_unique$ENTREZID

# Sort it
gene_list <- sort(gene_list, decreasing = TRUE)

# Final check — should return 0
sum(duplicated(names(gene_list)))
```

```{r}
gsea_result <- gseGO(geneList     = gene_list,
                     OrgDb        = org.Hs.eg.db,
                     keyType      = "ENTREZID",
                     ont          = "BP",
                     pAdjustMethod = "BH",
                     verbose      = FALSE)

dotplot(gsea_result, showCategory = 10)
```

Custom signatures

heatmap with T helper sub-type groups

Interesting genes?

Bias?

Frequency plots?

Updates:

```{r}
# 1. Get normalized expression values
normalized_counts <- counts(dds, normalized = TRUE)

# 2. Convert to long format
rna_data <- as.data.frame(normalized_counts)
rna_data$Gene <- rownames(rna_data)

# Reshape to long format (Gene, Sample, Expression)
rna_data <- reshape2::melt(rna_data, id.vars = "Gene", variable.name = "Sample", value.name = "Expression")

# 3. Add sample metadata
# Assuming you have a metadata dataframe like colData (from DESeq2 setup)
metadata <- as.data.frame(colData(dds))
metadata$Sample <- rownames(metadata)

# Merge metadata into long-format expression table
rna_data <- merge(rna_data, metadata, by = "Sample")
```

```{r}
# Load necessary libraries
library(ggplot2)
library(pheatmap)
library(dplyr)
library(reshape2)  # for acast
library(ggpubr)    # not ggpub

# Define your genes of interest (Ensembl IDs)
custom_signatures <- c(
  "ENSG00000112115", "ENSG00000248101", "ENSG00000118257",
  "ENSG00000164399", "ENSG00000177606", "ENSG00000120129"
)

# Filter expression data for selected genes
signature_expression <- rna_data %>%
  filter(Gene %in% custom_signatures)

# Create expression matrix for heatmap
expression_matrix <- acast(signature_expression, Gene ~ Sample, value.var = "Expression")

# Heatmap with T Helper Sub-type Groups


pheatmap(expression_matrix,
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         main = "Heatmap of Selected Genes by T Helper Sub-type")

png("selected_genes_heatmap.png", width = 1000, height = 800)
pheatmap(expression_matrix,
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         main = "Heatmap of Selected Genes")
dev.off()
```

genes of interest

```{r}
# 2. Subset the DESeq2 results for just those genes
goi_results <- res[rownames(res) %in% significant_genes, ]

# 3. Convert to a data frame
goi_results_df <- as.data.frame(goi_results)

# 4. Add gene names as a column
goi_results_df$Gene <- rownames(goi_results_df)

# 5. Reorder columns (optional)
goi_results_df <- goi_results_df[, c("Gene", "log2FoldChange", "pvalue", "padj")]

# 6. View or export
print(goi_results_df)

# Optional: Save to CSV
write.csv(goi_results_df, "genes_of_interest_pvalues.csv", row.names = FALSE)
```
